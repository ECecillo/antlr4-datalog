# Generated from Datalog.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,176,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,5,19,122,8,19,10,19,
        12,19,125,9,19,1,20,1,20,5,20,129,8,20,10,20,12,20,132,9,20,1,21,
        1,21,1,21,1,21,5,21,138,8,21,10,21,12,21,141,9,21,1,21,1,21,1,21,
        1,21,1,21,5,21,148,8,21,10,21,12,21,151,9,21,1,21,3,21,154,8,21,
        1,22,4,22,157,8,22,11,22,12,22,158,1,23,1,23,5,23,163,8,23,10,23,
        12,23,166,9,23,1,23,1,23,1,24,4,24,171,8,24,11,24,12,24,172,1,24,
        1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,1,0,9,1,0,97,122,5,0,45,45,48,57,65,90,95,95,97,
        122,1,0,65,90,3,0,65,90,95,95,97,122,1,0,39,39,1,0,34,34,1,0,48,
        57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,185,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,56,1,0,0,
        0,5,58,1,0,0,0,7,60,1,0,0,0,9,62,1,0,0,0,11,64,1,0,0,0,13,67,1,0,
        0,0,15,73,1,0,0,0,17,77,1,0,0,0,19,81,1,0,0,0,21,85,1,0,0,0,23,92,
        1,0,0,0,25,97,1,0,0,0,27,102,1,0,0,0,29,108,1,0,0,0,31,111,1,0,0,
        0,33,113,1,0,0,0,35,115,1,0,0,0,37,117,1,0,0,0,39,119,1,0,0,0,41,
        126,1,0,0,0,43,153,1,0,0,0,45,156,1,0,0,0,47,160,1,0,0,0,49,170,
        1,0,0,0,51,52,5,116,0,0,52,53,5,121,0,0,53,54,5,112,0,0,54,55,5,
        101,0,0,55,2,1,0,0,0,56,57,5,58,0,0,57,4,1,0,0,0,58,59,5,63,0,0,
        59,6,1,0,0,0,60,61,5,126,0,0,61,8,1,0,0,0,62,63,5,61,0,0,63,10,1,
        0,0,0,64,65,5,33,0,0,65,66,5,61,0,0,66,12,1,0,0,0,67,68,5,67,0,0,
        68,69,5,79,0,0,69,70,5,85,0,0,70,71,5,78,0,0,71,72,5,84,0,0,72,14,
        1,0,0,0,73,74,5,83,0,0,74,75,5,85,0,0,75,76,5,77,0,0,76,16,1,0,0,
        0,77,78,5,65,0,0,78,79,5,86,0,0,79,80,5,71,0,0,80,18,1,0,0,0,81,
        82,5,105,0,0,82,83,5,110,0,0,83,84,5,116,0,0,84,20,1,0,0,0,85,86,
        5,115,0,0,86,87,5,116,0,0,87,88,5,114,0,0,88,89,5,105,0,0,89,90,
        5,110,0,0,90,91,5,103,0,0,91,22,1,0,0,0,92,93,5,98,0,0,93,94,5,111,
        0,0,94,95,5,111,0,0,95,96,5,108,0,0,96,24,1,0,0,0,97,98,5,116,0,
        0,98,99,5,114,0,0,99,100,5,117,0,0,100,101,5,101,0,0,101,26,1,0,
        0,0,102,103,5,102,0,0,103,104,5,97,0,0,104,105,5,108,0,0,105,106,
        5,115,0,0,106,107,5,101,0,0,107,28,1,0,0,0,108,109,5,58,0,0,109,
        110,5,45,0,0,110,30,1,0,0,0,111,112,5,44,0,0,112,32,1,0,0,0,113,
        114,5,46,0,0,114,34,1,0,0,0,115,116,5,40,0,0,116,36,1,0,0,0,117,
        118,5,41,0,0,118,38,1,0,0,0,119,123,7,0,0,0,120,122,7,1,0,0,121,
        120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,
        40,1,0,0,0,125,123,1,0,0,0,126,130,7,2,0,0,127,129,7,3,0,0,128,127,
        1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,42,1,
        0,0,0,132,130,1,0,0,0,133,139,5,39,0,0,134,138,8,4,0,0,135,136,5,
        92,0,0,136,138,5,39,0,0,137,134,1,0,0,0,137,135,1,0,0,0,138,141,
        1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,
        1,0,0,0,142,154,5,39,0,0,143,149,5,34,0,0,144,148,8,5,0,0,145,146,
        5,92,0,0,146,148,5,34,0,0,147,144,1,0,0,0,147,145,1,0,0,0,148,151,
        1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,
        1,0,0,0,152,154,5,34,0,0,153,133,1,0,0,0,153,143,1,0,0,0,154,44,
        1,0,0,0,155,157,7,6,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,
        1,0,0,0,158,159,1,0,0,0,159,46,1,0,0,0,160,164,5,37,0,0,161,163,
        8,7,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,
        1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,6,23,0,0,168,48,
        1,0,0,0,169,171,7,8,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,
        1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,6,24,0,0,175,50,
        1,0,0,0,11,0,123,130,137,139,147,149,153,158,164,172,1,6,0,0
    ]

class DatalogLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    INTTYPE = 10
    STRINGTYPE = 11
    BOOLTYPE = 12
    TRUE = 13
    FALSE = 14
    ASSIGN = 15
    COMA = 16
    DOT = 17
    LEFT_PAR = 18
    RIGHT_PAR = 19
    IDENTIFIER = 20
    VARIABLE = 21
    STRING = 22
    INTEGER = 23
    COMMENT = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'type'", "':'", "'?'", "'~'", "'='", "'!='", "'COUNT'", "'SUM'", 
            "'AVG'", "'int'", "'string'", "'bool'", "'true'", "'false'", 
            "':-'", "','", "'.'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "INTTYPE", "STRINGTYPE", "BOOLTYPE", "TRUE", "FALSE", "ASSIGN", 
            "COMA", "DOT", "LEFT_PAR", "RIGHT_PAR", "IDENTIFIER", "VARIABLE", 
            "STRING", "INTEGER", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "INTTYPE", "STRINGTYPE", "BOOLTYPE", "TRUE", 
                  "FALSE", "ASSIGN", "COMA", "DOT", "LEFT_PAR", "RIGHT_PAR", 
                  "IDENTIFIER", "VARIABLE", "STRING", "INTEGER", "COMMENT", 
                  "WS" ]

    grammarFileName = "Datalog.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


