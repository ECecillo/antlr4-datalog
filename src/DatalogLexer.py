# Generated from Datalog.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,171,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,
        1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,3,11,102,8,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
        15,1,16,1,16,1,17,1,17,5,17,117,8,17,10,17,12,17,120,9,17,1,18,1,
        18,5,18,124,8,18,10,18,12,18,127,9,18,1,19,1,19,1,19,1,19,5,19,133,
        8,19,10,19,12,19,136,9,19,1,19,1,19,1,19,1,19,1,19,5,19,143,8,19,
        10,19,12,19,146,9,19,1,19,3,19,149,8,19,1,20,4,20,152,8,20,11,20,
        12,20,153,1,21,1,21,5,21,158,8,21,10,21,12,21,161,9,21,1,21,1,21,
        1,22,4,22,166,8,22,11,22,12,22,167,1,22,1,22,0,0,23,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,9,1,0,97,122,
        5,0,45,45,48,57,65,90,95,95,97,122,2,0,65,90,95,95,3,0,65,90,95,
        95,97,122,1,0,39,39,1,0,34,34,1,0,48,57,2,0,10,10,13,13,3,0,9,10,
        13,13,32,32,182,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,
        3,52,1,0,0,0,5,54,1,0,0,0,7,56,1,0,0,0,9,58,1,0,0,0,11,60,1,0,0,
        0,13,63,1,0,0,0,15,67,1,0,0,0,17,74,1,0,0,0,19,79,1,0,0,0,21,84,
        1,0,0,0,23,101,1,0,0,0,25,103,1,0,0,0,27,106,1,0,0,0,29,108,1,0,
        0,0,31,110,1,0,0,0,33,112,1,0,0,0,35,114,1,0,0,0,37,121,1,0,0,0,
        39,148,1,0,0,0,41,151,1,0,0,0,43,155,1,0,0,0,45,165,1,0,0,0,47,48,
        5,116,0,0,48,49,5,121,0,0,49,50,5,112,0,0,50,51,5,101,0,0,51,2,1,
        0,0,0,52,53,5,58,0,0,53,4,1,0,0,0,54,55,5,63,0,0,55,6,1,0,0,0,56,
        57,5,126,0,0,57,8,1,0,0,0,58,59,5,61,0,0,59,10,1,0,0,0,60,61,5,33,
        0,0,61,62,5,61,0,0,62,12,1,0,0,0,63,64,5,105,0,0,64,65,5,110,0,0,
        65,66,5,116,0,0,66,14,1,0,0,0,67,68,5,115,0,0,68,69,5,116,0,0,69,
        70,5,114,0,0,70,71,5,105,0,0,71,72,5,110,0,0,72,73,5,103,0,0,73,
        16,1,0,0,0,74,75,5,98,0,0,75,76,5,111,0,0,76,77,5,111,0,0,77,78,
        5,108,0,0,78,18,1,0,0,0,79,80,5,116,0,0,80,81,5,114,0,0,81,82,5,
        117,0,0,82,83,5,101,0,0,83,20,1,0,0,0,84,85,5,102,0,0,85,86,5,97,
        0,0,86,87,5,108,0,0,87,88,5,115,0,0,88,89,5,101,0,0,89,22,1,0,0,
        0,90,91,5,67,0,0,91,92,5,79,0,0,92,93,5,85,0,0,93,94,5,78,0,0,94,
        102,5,84,0,0,95,96,5,83,0,0,96,97,5,85,0,0,97,102,5,77,0,0,98,99,
        5,65,0,0,99,100,5,86,0,0,100,102,5,71,0,0,101,90,1,0,0,0,101,95,
        1,0,0,0,101,98,1,0,0,0,102,24,1,0,0,0,103,104,5,58,0,0,104,105,5,
        45,0,0,105,26,1,0,0,0,106,107,5,44,0,0,107,28,1,0,0,0,108,109,5,
        46,0,0,109,30,1,0,0,0,110,111,5,40,0,0,111,32,1,0,0,0,112,113,5,
        41,0,0,113,34,1,0,0,0,114,118,7,0,0,0,115,117,7,1,0,0,116,115,1,
        0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,36,1,0,
        0,0,120,118,1,0,0,0,121,125,7,2,0,0,122,124,7,3,0,0,123,122,1,0,
        0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,38,1,0,0,
        0,127,125,1,0,0,0,128,134,5,39,0,0,129,133,8,4,0,0,130,131,5,92,
        0,0,131,133,5,39,0,0,132,129,1,0,0,0,132,130,1,0,0,0,133,136,1,0,
        0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,134,1,0,
        0,0,137,149,5,39,0,0,138,144,5,34,0,0,139,143,8,5,0,0,140,141,5,
        92,0,0,141,143,5,34,0,0,142,139,1,0,0,0,142,140,1,0,0,0,143,146,
        1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,144,
        1,0,0,0,147,149,5,34,0,0,148,128,1,0,0,0,148,138,1,0,0,0,149,40,
        1,0,0,0,150,152,7,6,0,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,
        1,0,0,0,153,154,1,0,0,0,154,42,1,0,0,0,155,159,5,37,0,0,156,158,
        8,7,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,
        1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,163,6,21,0,0,163,44,
        1,0,0,0,164,166,7,8,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,
        1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,6,22,0,0,170,46,
        1,0,0,0,12,0,101,118,125,132,134,142,144,148,153,159,167,1,6,0,0
    ]

class DatalogLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    INTTYPE = 7
    STRINGTYPE = 8
    BOOLTYPE = 9
    TRUE = 10
    FALSE = 11
    AGGREGATE = 12
    ASSIGN = 13
    COMA = 14
    DOT = 15
    LEFT_PAR = 16
    RIGHT_PAR = 17
    IDENTIFIER = 18
    VARIABLE = 19
    STRING = 20
    INTEGER = 21
    COMMENT = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'type'", "':'", "'?'", "'~'", "'='", "'!='", "'int'", "'string'", 
            "'bool'", "'true'", "'false'", "':-'", "','", "'.'", "'('", 
            "')'" ]

    symbolicNames = [ "<INVALID>",
            "INTTYPE", "STRINGTYPE", "BOOLTYPE", "TRUE", "FALSE", "AGGREGATE", 
            "ASSIGN", "COMA", "DOT", "LEFT_PAR", "RIGHT_PAR", "IDENTIFIER", 
            "VARIABLE", "STRING", "INTEGER", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "INTTYPE", 
                  "STRINGTYPE", "BOOLTYPE", "TRUE", "FALSE", "AGGREGATE", 
                  "ASSIGN", "COMA", "DOT", "LEFT_PAR", "RIGHT_PAR", "IDENTIFIER", 
                  "VARIABLE", "STRING", "INTEGER", "COMMENT", "WS" ]

    grammarFileName = "Datalog.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


